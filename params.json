{"name":"Linq4es2015","tagline":"Language Integrated Query for JavaScript based on ECMA Script 2015","body":"# LINQ4ES2015\r\n\r\nLanguage Integrated Query (LINQ) for JavaScript based on ECMA Script 2015\r\n\r\n(formerly known as [ES6](https://github.com/lukehoban/es6features))\r\n\r\n## Installing\r\n\r\nTo install LINQ4ES2015, [Node JS](https://nodejs.org) is required.\r\n\r\nIf you've not configured [jspm](http://jspm.io) yet, follow [our blog post](http://fermium.co/post/1c6546ba-891d-479d-8731-896fbbae61fa/JSPM)\r\n\r\nGo to the root directory of the project and run the following command to install LINQ4ES2015:\r\n\r\n    jspm install github:Fermium-co/LINQ4ES2015@0.0.1\r\n\r\nYou can use any version instead of 0.0.1 (see [releases](https://github.com/Fermium-co/LINQ4ES2015/releases)).\r\n\r\n## Usage\r\n\r\nAfter installing LINQ4ES2015 you can use the following JavaScript code to import it:\r\n```javascript\r\n\timport Linq from \"Fermium-co/LINQ4ES2015/linq\";\r\n```\r\na simple usage is shown in the following code (Prototype based approach):\r\n```javascript\r\n    Linq.setExtensions(); // You've to run this, if you're interested in prototype based approach.\r\n    let count = 0;\r\n    let result = [0, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9].asEnumerable()\r\n      .where(num => { count++; return num % 2 == 0; })\r\n      .take(3)\r\n      .orderByDescending(num => num)\r\n      .select(num => '[' + num + ']')\r\n      .distinct()\r\n      .toArray();\r\n    \r\n    let sum = 'a2r3'.asEnumerable().where(chr => !isNaN(chr)).select(num => Number(num)).sum();\r\n    // sum will be 5  \r\n```\r\n\r\nor wihtout extentions (No prototype modification is required):\r\n```javascript\r\n    let enumerable = Linq.asEnumerable([0, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9]);\r\n    let result = Linq.toArray(Linq.distinct(Linq.select(Linq.orderByDescending(Linq.take(Linq.where(enumerable, n => n % 2 == 0), 3), n => n), n => '[' + n ']')));\r\n    // You don't have to call Linq.setExtensions with this approach, and you can load any module you'd prefer to use, instead of loading all of them.\r\n```\r\n\r\nresult will be [ \"[2]\", \"[0]\" ] and where predicate will be executed only 4 times.\r\n\r\n## Samples\r\n\r\nDownload the [samples](https://github.com/Fermium-co/LINQ4ES2015/tree/dev/samples) folder and run the following command in the sample's directory:\r\n\r\n    jspm insatll\r\n\r\nWe need a webserver to run the sample. [http-server](https://github.com/indexzero/http-server) is a simple one. install it by runnting this command:\r\n\r\n    npm install http-server -g  \r\n\r\nthen run the following command in the sample's directory:\r\n\r\n    http-server\r\n\r\n## Roadmap\r\n\r\n***Supported methods***:\r\n\r\n* **Projection and restriction methods**:\r\n\r\n    select, selectMany, where\r\n* **Join methods**:\r\n\r\n    groupJoin, join\r\n* **Set methods**:\r\n\r\n    all, any, contains, concat, defaultIfEmpty, distinct, except, intersect, union\r\n* **Ordering methods**:\r\n\r\n    orderBy, orderByDescending, reverse\r\n* **Grouping methods**:\r\n\r\n    groupBy\r\n* **Aggregate Methods**:\r\n\r\n    aggregate, average, count, max, min, sum, \r\n* **Paging methods**:\r\n\r\n    elementAt, elementAtOrDefault, first, firstOrDefault, last, lastOrDefault, single, singleOrDefault,\r\n    \r\n    skip, skipWhile, take, takeWhile \r\n* **Enumerable methods**:\r\n\r\n    asEnumerable, empty, range, repeat\r\n* **Other methods**:\r\n\r\n    zip, toLooup, toArray, sequenceEqual\r\n\r\n***In Progress Methods***:\r\n\r\nthenBy\r\nthenByDescending\r\n\r\n\r\n## Contribute\r\n\r\nSee [CONTRIBUTING.md](https://github.com/Fermium-co/LINQ4ES2015/blob/master/CONTRIBUTING.md)\r\n\r\n## Documentation\r\n\r\nSee [Wiki pages](https://github.com/Fermium-co/LINQ4ES2015/wiki)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}